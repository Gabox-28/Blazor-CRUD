@page "/Products"
@using BlazorApp.models
@using BlazorApp.Services
@inject ILogger<Products> Logger;
@inject IProductService ProductService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject IToastService ToastService;

<link rel="stylesheet" href="Products.razor.css" />

<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products"></ModuleTitle>

<button class="btn btn-dark" @onclick="@(() => NavigationManager.NavigateTo("/AddProduct"))">Add Product</button>


@if (products?.Count > 0)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210"/>
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C")</p>
                    <button title="Eliminar" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))"><span class="oi oi-trash"></span></button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No hay productos para mostrar</p>
}

@code {
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task GetProducts()
    {
        products = await ProductService.Get();
    }

    private async Task DeleteProduct(Product product)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Are u sure u want to remove{product.Title}"))
        {
            return;
        }
            
        await ProductService.Delete(product.Id);
        ToastService.ShowSuccess("Product deleted");
        await GetProducts();
    }
}